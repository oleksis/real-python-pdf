$(document).ready(()=>{const sectionOverlap=new Map();const scrollParentToChild=(parent,child)=>{const parentRect=parent.getBoundingClientRect();const childRect=child.getBoundingClientRect();const isViewable=(childRect.top>=parentRect.top)&&(childRect.top<=parentRect.top+parent.clientHeight);if(!isViewable){parent.scrollTop=(childRect.top+parent.scrollTop)-parentRect.top-4;}};const observerCallback=entries=>{for(const entry of entries){const bounding=entry.boundingClientRect;if(bounding.bottom>=0&&bounding.top<=window.innerHeight){const overlap=bounding.top>0?window.innerHeight-bounding.top:bounding.bottom;sectionOverlap.set(entry.target,overlap);}else{sectionOverlap.set(entry.target,0);}}
refreshTOC()};const refreshTOC=()=>{let maxOverlap=0;let maxOverlapElem=null;sectionOverlap.forEach((overlap,elem)=>{if(overlap>maxOverlap){maxOverlap=overlap;maxOverlapElem=elem;}});document.querySelectorAll(`#sidebar-toc li`).forEach(elem=>elem.classList.remove('active'));if(maxOverlapElem){const id=maxOverlapElem.getAttribute('id');document.querySelector(`#sidebar-toc li a[href="#${id}"]`).parentElement.classList.add('active');scrollParentToChild(document.querySelector("#sidebar-toc"),document.querySelector(`#sidebar-toc li a[href="#${id}"]`));}};const threshold=[];for(let i=0;i<=100;i++){threshold.push(i/100)}
const observer=new IntersectionObserver(observerCallback,{threshold:threshold});document.querySelectorAll('section.section2').forEach(section=>{observer.observe(section);});});